-- https://docs.google.com/a/cin.ufpe.br/viewer?a=v&pid=sites&srcid=Y2luLnVmcGUuYnJ8aWY2ODZ8Z3g6ZTQ3MDhkYzkyNTY4YTEx
-- Q1 
type Posi = (Int, Int)

mx :: Int -> Int
mx 0 = 1 
mx 1 = 1
mx 2 = 2
mx 3 = 2
mx 4 = -1
mx 5 = -1
mx 6 = -2
mx 7 = -2

my :: Int -> Int
my 0 = 2 
my 1 = -2
my 2 = 1
my 3 = -1
my 4 = 2
my 5 = -2
my 6 = -1
my 7 = 1

inside :: Posi -> Int -> Bool
inside (x,y) n 
	| x >= 0 && x < n && y >= 0 && y < n = True
	| otherwise = False

pode :: Posi -> [Posi] -> Bool
pode (x,y) [] = True
pode (x,y) ((e,f): as)
	| x == e && y == f = False
	| otherwise = pode (x,y) as
	
valid :: Posi -> Int -> [Posi] -> Bool
valid p n as = (inside p n) && (pode p as)

ok :: [Posi] -> Bool
ok [] = True
ok ((x,y): as)
		| x == -1 = False
		| otherwise = True

nova :: Posi -> Int -> Posi
nova (x,y) n = (x + (mx n), y + (my n))

continue :: Posi -> [Posi] -> Int -> Int-> Bool
continue p as n i = (valid (nova p i) n as) && ok ((pa (nova p i) (as ++ [(nova p i)]) (n)))

advance :: Posi -> [Posi] -> Int -> Int -> [Posi]
advance p as n i = pa (nova p i) (as ++ [(nova p i)]) (n) 
	
pa :: Posi -> [Posi] -> Int -> [Posi]
pa p as n 
	| length as == n*n = as
	| continue p as n 0 =  advance p as n 0
	| continue p as n 1 =  advance p as n 1
	| continue p as n 2 =  advance p as n 2
	| continue p as n 3 =  advance p as n 3
	| continue p as n 4 =  advance p as n 4
	| continue p as n 5 =  advance p as n 5
	| continue p as n 6 =  advance p as n 6
	| continue p as n 7 =  advance p as n 7
	| otherwise = [(-1,-1)]

passeioCavalo :: (Int, Int) -> Int -> [(Int,Int)]
passeioCavalo p n
	| (mod n 2) == 1 = []
	| n <= 5 = []
	| inside p n == False = []
	| otherwise = pa p [p] n






